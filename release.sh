#!/bin/bash

# 🚀 Flutter Release Automation Script
# =====================================

set -e  # Arrêt en cas d'erreur

# Variables de configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR" && pwd)"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOGS_DIR="$PROJECT_ROOT/logs"
LOG_FILE="$LOGS_DIR/release_$TIMESTAMP.log"
BUILDS_DIR="$PROJECT_ROOT/builds"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging avec commande exécutée
log() {
    # Créer le dossier logs si nécessaire
    mkdir -p "$LOGS_DIR"
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE"
}

log_warning() {
    mkdir -p "$LOGS_DIR"
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] [WARNING] $1${NC}" | tee -a "$LOG_FILE"
}

log_error() {
    mkdir -p "$LOGS_DIR"
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] [ERROR] $1${NC}" | tee -a "$LOG_FILE"
}

log_info() {
    mkdir -p "$LOGS_DIR"
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] [INFO] $1${NC}" | tee -a "$LOG_FILE"
}

# Fonction pour logger les commandes exécutées
log_command() {
    local cmd="$1"
    mkdir -p "$LOGS_DIR"
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] [CMD] $cmd${NC}" | tee -a "$LOG_FILE"
}

# Fonction pour créer/mettre à jour .gitignore
create_gitignore() {
    local gitignore_file="$PROJECT_ROOT/.gitignore"
    local gitignore_content="# Flutter Release Script
builds/
logs/
*.log
release_*.log

# Flutter build outputs
build/
.dart_tool/
.packages
.pub-cache/
.pub/

# IDE
.idea/
.vscode/
*.iml
*.ipr
*.iws

# OS
.DS_Store
Thumbs.db"

    if [[ -f "$gitignore_file" ]]; then
        # Ajouter seulement si les entrées n'existent pas déjà
        if ! grep -q "builds/" "$gitignore_file" 2>/dev/null; then
            echo "" >> "$gitignore_file"
            echo "# Flutter Release Script" >> "$gitignore_file"
            echo "builds/" >> "$gitignore_file"
            echo "logs/" >> "$gitignore_file"
            echo "*.log" >> "$gitignore_file"
            log_info ".gitignore mis à jour avec builds/ et logs/"
        else
            log_info ".gitignore déjà configuré"
        fi
    else
        echo "$gitignore_content" > "$gitignore_file"
        log_info ".gitignore créé avec configuration complète"
    fi
}

# Fonction pour corriger automatiquement la config Android
fix_android_config() {
    local build_gradle="android/app/build.gradle"
    local local_properties="android/local.properties"
    
    log_info "🔧 Correction automatique de la configuration Android..."
    
    # 1. Corriger local.properties
    if [[ -f "$local_properties" ]]; then
        cp "$local_properties" "$local_properties.backup"
        
        # Supprimer les anciennes valeurs flutter.*
        grep -v "^flutter\.minSdkVersion" "$local_properties" > "$local_properties.tmp1" 2>/dev/null || touch "$local_properties.tmp1"
        grep -v "^flutter\.targetSdkVersion" "$local_properties.tmp1" > "$local_properties.tmp2" 2>/dev/null || touch "$local_properties.tmp2"
        grep -v "^flutter\.compileSdkVersion" "$local_properties.tmp2" > "$local_properties.tmp3" 2>/dev/null || touch "$local_properties.tmp3"
        
        mv "$local_properties.tmp3" "$local_properties"
        rm -f "$local_properties.tmp1" "$local_properties.tmp2" 2>/dev/null || true
    else
        touch "$local_properties"
    fi
    
    # Ajouter les bonnes valeurs
    cat >> "$local_properties" << EOF

# Flutter SDK Configuration (Auto-generated by release script)
flutter.minSdkVersion=23
flutter.targetSdkVersion=34
flutter.compileSdkVersion=34
EOF
    
    # 2. Nettoyer les caches Gradle
    log_info "Nettoyage des caches Gradle..."
    log_command "rm -rf android/.gradle android/app/.gradle"
    rm -rf android/.gradle android/app/.gradle 2>/dev/null || true
    
    log "✅ Configuration Android corrigée:"
    log_info "  - flutter.minSdkVersion=23"
    log_info "  - flutter.targetSdkVersion=34"
    log_info "  - flutter.compileSdkVersion=34"
    log_info "  - Caches Gradle nettoyés"
}

# Fonction d'aide
show_help() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -v, --version VERSION    Version à publier (ex: 1.2.3) [optionnel]"
    echo "  -b, --build BUILD        Build number spécifique (ex: --build 5)"
    echo "  -p, --platform PLATFORM  Plateforme (all, android, ios) [défaut: all]"
    echo "  --skip-tests            Skip les tests unitaires"
    echo "  --skip-git-check        Ignorer les vérifications Git"
    echo "  --git                   Activer Git (commit, tag, push)"
    echo "  --dry-run               Mode simulation"
    echo "  -h, --help              Afficher cette aide"
    echo ""
    echo "Build Number:"
    echo "  Sans --build: Auto-incrémente le build actuel"
    echo "  Avec --build: Utilise le numéro spécifié"
    echo ""
    echo "Exemples:"
    echo "  $0 --skip-git-check                    # Build auto-incrémenté"
    echo "  $0 --build 5 --skip-git-check         # Build number = 5"
    echo "  $0 -v 1.2.3 --build 10 --skip-git-check # Version 1.2.3 Build 10"
    echo "  $0 --platform android --build 7 --skip-git-check # Android Build 7"
}

# Variables par défaut
VERSION=""
BUILD_NUMBER=""
SKIP_TESTS=false
SKIP_GIT=true
SKIP_GIT_CHECK=false
DRY_RUN=false
PLATFORM="all"

# Parse des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -v|--version)
            VERSION="$2"
            shift 2
            ;;
        -b|--build)
            # Validation du build number
            if [[ "$2" =~ ^[0-9]+$ ]]; then
                BUILD_NUMBER="$2"
                shift 2
            else
                log_error "Build number invalide: $2. Utilisez un nombre entier (ex: --build 5)"
                exit 1
            fi
            ;;
        -p|--platform)
            PLATFORM="$2"
            shift 2
            ;;
        --skip-tests)
            SKIP_TESTS=true
            shift
            ;;
        --git)
            SKIP_GIT=false
            shift
            ;;
        --skip-git-check)
            SKIP_GIT_CHECK=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            log_error "Option inconnue: $1"
            show_help
            exit 1
            ;;
    esac
done

# Validation de la version si spécifiée
if [[ -n "$VERSION" && ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    log_error "Format de version invalide. Utilisez x.y.z (ex: 1.2.3)"
    exit 1
fi

# Configuration des plateformes
case $PLATFORM in
    android)
        SKIP_IOS=true
        SKIP_ANDROID=false
        ;;
    ios)
        SKIP_ANDROID=true
        SKIP_IOS=false
        ;;
    all)
        SKIP_ANDROID=false
        SKIP_IOS=false
        ;;
    *)
        log_error "Plateforme invalide: $PLATFORM. Utilisez: all, android, ou ios"
        exit 1
        ;;
esac

log "🚀 DÉMARRAGE DE LA RELEASE AUTOMATION"
log "======================================"
log "Version: $([ -z "$VERSION" ] && echo "actuelle (sera détectée)" || echo "$VERSION")"
log "Build: $([ -z "$BUILD_NUMBER" ] && echo "auto-increment" || echo "$BUILD_NUMBER (spécifié)")"
log "Plateforme: $PLATFORM"
log "Skip Git Check: $SKIP_GIT_CHECK"
log "Dry Run: $DRY_RUN"

# Vérifier qu'on est dans un projet Flutter
if [[ ! -f "$PROJECT_ROOT/pubspec.yaml" ]]; then
    log_error "Pas de fichier pubspec.yaml trouvé. Êtes-vous dans un projet Flutter ?"
    log_command "ls -la"
    ls -la
    log_command "pwd"
    pwd
    exit 1
fi

# =====================================
# 1. VÉRIFICATIONS ENVIRONNEMENT
# =====================================

log "📋 ÉTAPE 1: Vérifications de l'environnement"

# Vérifier Flutter
if ! command -v flutter &> /dev/null; then
    log_error "Flutter n'est pas installé ou pas dans le PATH"
    log_command "which flutter"
    which flutter 2>/dev/null || log_info "Commande flutter non trouvée"
    log_command "echo \$PATH"
    echo $PATH
    exit 1
fi

log_command "flutter --version"
FLUTTER_VERSION=$(flutter --version | head -1)
log_info "Flutter détecté: $FLUTTER_VERSION"

# Vérifier Git si nécessaire
if [[ "$SKIP_GIT" != true ]]; then
    if ! command -v git &> /dev/null; then
        log_error "Git n'est pas installé"
        exit 1
    fi
    
    if [[ "$SKIP_GIT_CHECK" != true ]]; then
        cd "$PROJECT_ROOT"
        log_command "git status --porcelain"
        if [[ -n $(git status --porcelain) ]]; then
            log_error "Le repository Git a des modifications non commitées"
            git status --porcelain
            log_info "Utilisez --skip-git-check pour ignorer cette vérification"
            exit 1
        fi
    fi
fi

log "✅ Environnement validé"

# =====================================
# 2. MISE À JOUR DES DÉPENDANCES
# =====================================

log "📦 ÉTAPE 2: Mise à jour des dépendances"

if [[ "$DRY_RUN" != true ]]; then
    log_command "flutter clean"
    flutter clean
    log_command "flutter pub get"
    flutter pub get
fi

log "✅ Dépendances mises à jour"

# =====================================
# 3. EXÉCUTION DES TESTS
# =====================================

if [[ "$SKIP_TESTS" != true ]]; then
    log "🧪 ÉTAPE 3: Exécution des tests"
    
    if [[ "$DRY_RUN" != true ]]; then
        log_command "find test -name '*_test.dart'"
        if [[ -d "test" && $(find test -name "*_test.dart" 2>/dev/null | wc -l) -gt 0 ]]; then
            find test -name "*_test.dart" | head -5
            log_command "flutter test"
            if flutter test; then
                log "✅ Tests unitaires réussis"
            else
                log_error "Les tests unitaires ont échoué"
                exit 1
            fi
        else
            log_warning "Aucun fichier de test trouvé - Tests ignorés"
            ls -la test/ 2>/dev/null || log_info "Dossier test/ non trouvé"
        fi
    else
        log_info "Mode dry-run: tests skippés"
    fi
else
    log_warning "Tests skippés par l'utilisateur"
fi

# =====================================
# 4. MISE À JOUR DE LA VERSION
# =====================================

log "🔢 ÉTAPE 4: Mise à jour du numéro de version"

# Lire la version actuelle
CURRENT_VERSION=$(grep "^version:" pubspec.yaml | sed 's/version: //' | tr -d ' ')
CURRENT_VERSION_NUMBER=$(echo "$CURRENT_VERSION" | cut -d'+' -f1)
CURRENT_BUILD=$(echo "$CURRENT_VERSION" | cut -d'+' -f2)

log_info "Version actuelle: $CURRENT_VERSION_NUMBER+$CURRENT_BUILD"

# Auto-incrément du build number
if [[ -z "$BUILD_NUMBER" ]]; then
    BUILD_NUMBER=$((CURRENT_BUILD + 1))
    log_info "Build number auto-incrémenté: $BUILD_NUMBER"
else
    log_info "Build number spécifié: $BUILD_NUMBER"
fi

# Déterminer la version finale
if [[ -z "$VERSION" ]]; then
    FINAL_VERSION="$CURRENT_VERSION_NUMBER"
    log_info "Conservation de la version actuelle: $FINAL_VERSION"
else
    FINAL_VERSION="$VERSION"
    log_info "Nouvelle version: $FINAL_VERSION"
fi

NEW_VERSION_STRING="${FINAL_VERSION}+${BUILD_NUMBER}"
log_info "Version finale: $NEW_VERSION_STRING"

if [[ "$DRY_RUN" != true ]]; then
    # Backup et mise à jour
    cp pubspec.yaml pubspec.yaml.backup
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        sed -i '' "s/^version: .*/version: $NEW_VERSION_STRING/" pubspec.yaml
    else
        sed -i "s/^version: .*/version: $NEW_VERSION_STRING/" pubspec.yaml
    fi
    
    log "✅ Version mise à jour dans pubspec.yaml"
else
    log_info "Mode dry-run: version non modifiée"
fi

# =====================================
# 5. CRÉATION DES DOSSIERS
# =====================================

log "📁 ÉTAPE 5: Préparation des dossiers"

if [[ "$DRY_RUN" != true ]]; then
    # Créer le dossier logs
    mkdir -p "$LOGS_DIR"
    
    # Créer le dossier builds
    mkdir -p "$BUILDS_DIR"
    rm -rf "$BUILDS_DIR"/*
    
    # Créer/mettre à jour .gitignore
    create_gitignore
    
    log "✅ Dossiers préparés:"
    log_info "  - Builds: $BUILDS_DIR"
    log_info "  - Logs: $LOGS_DIR"
fi

# =====================================
# 6. BUILD ANDROID
# =====================================

if [[ "$SKIP_ANDROID" != true ]]; then
    log "🤖 ÉTAPE 6: Build Android"
    
    if [[ "$DRY_RUN" != true ]]; then
        # Vérifier la configuration Android (support Groovy et Kotlin DSL)
        if [[ ! -f "android/app/build.gradle" && ! -f "android/app/build.gradle.kts" ]]; then
            log_warning "Configuration Android manquante"
            log_command "ls -la android/app/"
            ls -la android/app/ 2>/dev/null || log_info "Dossier android/app/ non trouvé"
            
            if [[ "$PLATFORM" == "android" ]]; then
                log_error "Build Android demandé mais configuration manquante"
                log_info "💡 Solution: flutter create --platforms android ."
                exit 1
            else
                log_info "Android skippé automatiquement"
                SKIP_ANDROID=true
            fi
        else
            if [[ -f "android/app/build.gradle.kts" ]]; then
                log_info "Configuration Android détectée: build.gradle.kts (Kotlin DSL)"
                ANDROID_BUILD_FILE="android/app/build.gradle.kts"
            else
                log_info "Configuration Android détectée: build.gradle (Groovy)"
                ANDROID_BUILD_FILE="android/app/build.gradle"
            fi
        fi
        
        # Build Android si configuration OK
        if [[ "$SKIP_ANDROID" != true ]]; then
            # NOUVEAU: Corriger automatiquement la config Android
            fix_android_config
            
            log_info "🔨 Génération de l'APK..."
            log_command "flutter build apk --release"
            if flutter build apk --release; then
                APK_SOURCE="build/app/outputs/flutter-apk/app-release.apk"
                APK_DEST="$BUILDS_DIR/app-release-${FINAL_VERSION}.apk"
                
                if [[ -f "$APK_SOURCE" ]]; then
                    cp "$APK_SOURCE" "$APK_DEST"
                    APK_SIZE=$(du -h "$APK_DEST" | cut -f1)
                    log "✅ APK généré: $APK_DEST ($APK_SIZE)"
                else
                    log_error "APK non trouvé: $APK_SOURCE"
                    exit 1
                fi
            else
                log_error "Échec de la génération APK"
                exit 1
            fi
            
            log_info "📦 Génération de l'App Bundle..."
            log_command "flutter build appbundle --release"
            if flutter build appbundle --release; then
                AAB_SOURCE="build/app/outputs/bundle/release/app-release.aab"
                AAB_DEST="$BUILDS_DIR/app-release-${FINAL_VERSION}.aab"
                
                if [[ -f "$AAB_SOURCE" ]]; then
                    cp "$AAB_SOURCE" "$AAB_DEST"
                    AAB_SIZE=$(du -h "$AAB_DEST" | cut -f1)
                    log "✅ App Bundle généré: $AAB_DEST ($AAB_SIZE)"
                else
                    log_error "App Bundle non trouvé: $AAB_SOURCE"
                    exit 1
                fi
            else
                log_error "Échec de la génération App Bundle"
                exit 1
            fi
            
            log "✅ Builds Android terminés avec succès"
        fi
    else
        log_info "Mode dry-run: build Android skippé"
    fi
else
    log_info "Build Android skippé"
fi

# =====================================
# 7. BUILD IOS
# =====================================

if [[ "$SKIP_IOS" != true ]]; then
    log "🍎 ÉTAPE 7: Build iOS"
    
    if [[ "$OSTYPE" != "darwin"* ]]; then
        if [[ "$PLATFORM" == "ios" ]]; then
            log_error "Build iOS demandé mais uniquement disponible sur macOS"
            exit 1
        else
            log_warning "Build iOS disponible uniquement sur macOS - Skippé"
            SKIP_IOS=true
        fi
    elif [[ "$DRY_RUN" != true ]]; then
        # Vérifier la configuration iOS
        if [[ ! -f "ios/Runner.xcodeproj/project.pbxproj" ]]; then
            log_warning "Configuration iOS manquante"
            log_command "ls -la ios/"
            ls -la ios/ 2>/dev/null || log_info "Dossier ios/ non trouvé"
            
            if [[ "$PLATFORM" == "ios" ]]; then
                log_error "Build iOS demandé mais configuration manquante"
                log_info "💡 Solution: flutter create --platforms ios ."
                exit 1
            else
                log_info "iOS skippé automatiquement"
                SKIP_IOS=true
            fi
        fi
        
        # Build iOS si configuration OK
        if [[ "$SKIP_IOS" != true ]]; then
            # Vérifier CocoaPods si nécessaire
            if command -v pod &> /dev/null && [[ -f "ios/Podfile" ]]; then
                log_info "📦 Mise à jour des CocoaPods..."
                cd ios
                log_command "pod install --repo-update"
                pod install --repo-update
                cd ..
            fi
            
            log_info "🔨 Génération du build iOS..."
            log_command "flutter build ios --release --no-codesign"
            if flutter build ios --release --no-codesign; then
                IOS_BUILD_PATH="build/ios/iphoneos/Runner.app"
                if [[ -d "$IOS_BUILD_PATH" ]]; then
                    IOS_ARCHIVE_PATH="$BUILDS_DIR/Runner-${FINAL_VERSION}.app"
                    cp -R "$IOS_BUILD_PATH" "$IOS_ARCHIVE_PATH"
                    
                    IOS_SIZE=$(du -sh "$IOS_ARCHIVE_PATH" | cut -f1)
                    log "✅ Build iOS généré: $IOS_ARCHIVE_PATH ($IOS_SIZE)"
                else
                    log_error "Build iOS non trouvé: $IOS_BUILD_PATH"
                    exit 1
                fi
            else
                log_error "Échec de la génération iOS"
                exit 1
            fi
            
            log "✅ Build iOS terminé avec succès"
        fi
    else
        log_info "Mode dry-run: build iOS skippé"
    fi
else
    log_info "Build iOS skippé"
fi

# =====================================
# 8. RÉSUMÉ FINAL
# =====================================

log "🎉 RELEASE TERMINÉE AVEC SUCCÈS!"
log "=================================="
log_info "Version: $FINAL_VERSION"
log_info "Build: $BUILD_NUMBER"

if [[ -d "$BUILDS_DIR" ]]; then
    log_info "Builds disponibles dans: $BUILDS_DIR"
    
    BUILD_COUNT=0
    if [[ -f "$BUILDS_DIR/app-release-${FINAL_VERSION}.apk" ]]; then
        APK_SIZE=$(du -h "$BUILDS_DIR/app-release-${FINAL_VERSION}.apk" | cut -f1)
        log_info "  📱 APK Android: app-release-${FINAL_VERSION}.apk ($APK_SIZE)"
        BUILD_COUNT=$((BUILD_COUNT + 1))
    fi
    
    if [[ -f "$BUILDS_DIR/app-release-${FINAL_VERSION}.aab" ]]; then
        AAB_SIZE=$(du -h "$BUILDS_DIR/app-release-${FINAL_VERSION}.aab" | cut -f1)
        log_info "  📦 AAB Android: app-release-${FINAL_VERSION}.aab ($AAB_SIZE)"
        BUILD_COUNT=$((BUILD_COUNT + 1))
    fi
    
    if [[ -d "$BUILDS_DIR/Runner-${FINAL_VERSION}.app" ]]; then
        IOS_SIZE=$(du -sh "$BUILDS_DIR/Runner-${FINAL_VERSION}.app" | cut -f1)
        log_info "  🍎 APP iOS: Runner-${FINAL_VERSION}.app ($IOS_SIZE)"
        BUILD_COUNT=$((BUILD_COUNT + 1))
    fi
    
    log_info "Total: $BUILD_COUNT build(s) généré(s)"
fi

log_info "Log complet: $LOG_FILE"

# Nettoyer les anciens logs (garder seulement les 10 derniers)
if [[ -d "$LOGS_DIR" ]]; then
    log_info "Nettoyage des anciens logs..."
    cd "$LOGS_DIR"
    ls -t release_*.log 2>/dev/null | tail -n +11 | xargs rm -f 2>/dev/null || true
    LOG_COUNT=$(ls release_*.log 2>/dev/null | wc -l)
    log_info "Logs conservés: $LOG_COUNT fichier(s)"
    cd "$PROJECT_ROOT"
fi

# Nettoyer les fichiers de backup
if [[ -f "pubspec.yaml.backup" ]]; then
    rm pubspec.yaml.backup
fi

log "✨ Release automation terminée!"

# Instructions finales
echo ""
echo -e "${GREEN}🚀 PROCHAINES ÉTAPES:${NC}"
echo -e "${BLUE}1. Vérifiez les builds dans: $BUILDS_DIR${NC}"

if [[ "$BUILD_COUNT" -gt 0 ]]; then
    echo -e "${BLUE}2. Testez vos builds${NC}"
    if [[ -f "$BUILDS_DIR/app-release-${FINAL_VERSION}.apk" ]]; then
        echo -e "${BLUE}   - Android APK: adb install $BUILDS_DIR/app-release-${FINAL_VERSION}.apk${NC}"
    fi
    echo -e "${BLUE}3. Publiez sur les stores${NC}"
fi

echo -e "${BLUE}4. 📋 Logs disponibles dans: $LOGS_DIR${NC}"
echo ""