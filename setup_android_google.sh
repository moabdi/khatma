#!/bin/bash

# üîß Script de configuration Google Sign-In Android
# R√©sout l'erreur ApiException: 10 (DEVELOPER_ERROR)

echo "üöÄ Configuration Google Sign-In Android"
echo "======================================="

# V√©rifier qu'on est dans un projet Flutter
if [ ! -f "pubspec.yaml" ]; then
    echo "‚ùå Erreur: Ex√©cutez ce script depuis la racine de votre projet Flutter"
    exit 1
fi

# V√©rifier qu'on a le dossier android
if [ ! -d "android" ]; then
    echo "‚ùå Erreur: Dossier android non trouv√©"
    exit 1
fi

echo ""
echo "üì± √âTAPE 1: R√©cup√©ration des informations Android"
echo "================================================"

# R√©cup√©rer le package name
PACKAGE_NAME=$(grep -r "applicationId" android/app/build.gradle | head -1 | sed 's/.*applicationId "//' | sed 's/".*//')
echo "üì¶ Package Name: $PACKAGE_NAME"

# V√©rifier si google-services.json existe
if [ -f "android/app/google-services.json" ]; then
    echo "‚úÖ google-services.json trouv√©"
    
    # V√©rifier le package name dans google-services.json
    JSON_PACKAGE=$(grep -o '"package_name":"[^"]*' android/app/google-services.json | head -1 | sed 's/"package_name":"//')
    echo "üìã Package dans JSON: $JSON_PACKAGE"
    
    if [ "$PACKAGE_NAME" != "$JSON_PACKAGE" ]; then
        echo "‚ö†Ô∏è  ATTENTION: Package name diff√©rent entre build.gradle et google-services.json"
        echo "   build.gradle: $PACKAGE_NAME"
        echo "   google-services.json: $JSON_PACKAGE"
    else
        echo "‚úÖ Package names correspondent"
    fi
else
    echo "‚ùå google-services.json NON TROUV√â dans android/app/"
    echo "   T√©l√©chargez-le depuis Firebase Console"
fi

echo ""
echo "üîë √âTAPE 2: G√©n√©ration SHA1 Fingerprint"
echo "======================================="

cd android

# G√©n√©rer le SHA1 avec gradlew
echo "üîÑ G√©n√©ration du SHA1 fingerprint..."
if ./gradlew signingReport > /tmp/signing_report.txt 2>&1; then
    echo "‚úÖ Rapport de signature g√©n√©r√©"
    
    # Extraire le SHA1
    SHA1=$(grep -A 10 "Variant: debug" /tmp/signing_report.txt | grep "SHA1:" | head -1 | sed 's/.*SHA1: //')
    
    if [ ! -z "$SHA1" ]; then
        echo "üîë SHA1 Debug: $SHA1"
        echo ""
        echo "üìã INFORMATIONS POUR FIREBASE CONSOLE:"
        echo "======================================"
        echo "Package Name: $PACKAGE_NAME"
        echo "SHA1 Fingerprint: $SHA1"
        echo ""
        echo "üîó √âtapes suivantes:"
        echo "1. Allez sur Firebase Console: https://console.firebase.google.com"
        echo "2. S√©lectionnez votre projet"
        echo "3. Project Settings (‚öôÔ∏è) > General > Your apps"
        echo "4. Cliquez sur votre app Android"
        echo "5. Ajoutez cette SHA1: $SHA1"
        echo "6. T√©l√©chargez le nouveau google-services.json"
        echo "7. Remplacez android/app/google-services.json"
    else
        echo "‚ùå Impossible d'extraire le SHA1 du rapport"
        echo "Contenu du rapport:"
        cat /tmp/signing_report.txt
    fi
else
    echo "‚ùå Erreur lors de la g√©n√©ration du rapport de signature"
    echo "Essayez manuellement avec:"
    echo "./gradlew signingReport"
fi

# Nettoyer le fichier temporaire
rm -f /tmp/signing_report.txt

cd ..

echo ""
echo "üßπ √âTAPE 3: Nettoyage et pr√©paration"
echo "===================================="

echo "üîÑ Nettoyage Flutter..."
flutter clean > /dev/null 2>&1
echo "‚úÖ Flutter clean termin√©"

echo "üîÑ R√©cup√©ration des d√©pendances..."
flutter pub get > /dev/null 2>&1
echo "‚úÖ Dependencies r√©cup√©r√©es"

echo "üîÑ Nettoyage Android..."
cd android
./gradlew clean > /dev/null 2>&1
echo "‚úÖ Android clean termin√©"
cd ..

echo ""
echo "üß™ √âTAPE 4: V√©rifications de configuration"
echo "=========================================="

# V√©rifier les d√©pendances Google Play Services
PLAY_SERVICES=$(grep -r "com.google.android.gms:play-services-auth" android/app/build.gradle)
if [ ! -z "$PLAY_SERVICES" ]; then
    echo "‚úÖ Google Play Services Auth trouv√©"
    echo "   $PLAY_SERVICES"
else
    echo "‚ö†Ô∏è  Google Play Services Auth pas trouv√©"
    echo "   Ajoutez dans android/app/build.gradle:"
    echo "   implementation 'com.google.android.gms:play-services-auth:20.7.0'"
fi

# V√©rifier le plugin Google Services
GOOGLE_SERVICES_PLUGIN=$(grep -r "com.google.gms.google-services" android/app/build.gradle)
if [ ! -z "$GOOGLE_SERVICES_PLUGIN" ]; then
    echo "‚úÖ Plugin Google Services trouv√©"
else
    echo "‚ö†Ô∏è  Plugin Google Services pas trouv√©"
    echo "   Ajoutez dans android/app/build.gradle:"
    echo "   apply plugin: 'com.google.gms.google-services'"
fi

# V√©rifier la version Gradle
GRADLE_VERSION=$(grep -r "com.android.tools.build:gradle" android/build.gradle | head -1)
if [ ! -z "$GRADLE_VERSION" ]; then
    echo "‚úÖ Version Gradle Android"
    echo "   $GRADLE_VERSION"
fi

echo ""
echo "üéØ R√âSUM√â ET ACTIONS SUIVANTES"
echo "============================="
echo ""
echo "üìã INFORMATIONS R√âCUP√âR√âES:"
echo "‚Ä¢ Package Name: $PACKAGE_NAME"
if [ ! -z "$SHA1" ]; then
    echo "‚Ä¢ SHA1 Debug: $SHA1"
fi
echo ""
echo "‚úÖ ACTIONS TERMIN√âES:"
echo "‚Ä¢ Nettoyage Flutter et Android"
echo "‚Ä¢ V√©rification de la configuration"
echo "‚Ä¢ G√©n√©ration du SHA1 fingerprint"
echo ""
echo "üî¥ ACTIONS REQUISES:"
echo "1. Copiez le SHA1 ci-dessus"
echo "2. Ajoutez-le dans Firebase Console"
echo "3. T√©l√©chargez le nouveau google-services.json"
echo "4. Remplacez android/app/google-services.json"
echo "5. Ex√©cutez: flutter run"
echo ""
echo "üîó Liens utiles:"
echo "‚Ä¢ Firebase Console: https://console.firebase.google.com"
echo "‚Ä¢ Documentation: https://firebase.google.com/docs/android/setup"
echo ""

# Proposer de tester imm√©diatement
echo "üß™ Voulez-vous tester maintenant ? (apr√®s avoir configur√© Firebase)"
echo "Tapez 'y' pour lancer flutter run, ou n'importe quoi d'autre pour terminer:"
read -r response

if [ "$response" = "y" ] || [ "$response" = "Y" ]; then
    echo "üöÄ Lancement de l'application..."
    flutter run
else
    echo "üëã Configuration termin√©e. N'oubliez pas de configurer Firebase Console !"
fi